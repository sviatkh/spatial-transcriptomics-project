[
  {
    "objectID": "02_spatial-analysis-clustering-bayesspace.R.html",
    "href": "02_spatial-analysis-clustering-bayesspace.R.html",
    "title": "",
    "section": "",
    "text": "CodeShow All CodeHide All Code\n\n\n\n\n\n\nShow code\nsuppressMessages(library(\"SingleCellExperiment\"))\nsuppressMessages(library(\"BayesSpace\"))\n\n\nERROR: Error in library(\"ggspavis\"): there is no package called ‘ggspavis’\n\nError in library(\"ggspavis\"): there is no package called ‘ggspavis’\nTraceback:\n\n1. withCallingHandlers(expr, message = function(c) if (inherits(c, \n .     classes)) tryInvokeRestart(\"muffleMessage\"))\n2. library(\"ggspavis\")\n3. stop(packageNotFoundError(package, lib.loc, sys.call()))\n\n\n\n\nShow code\n# assign vector of sample names\nsample_names &lt;- c(\"ST_GSM6171784_PSAPP_CO1.rds\", \"ST_GSM6171785_PSAPP_TAM1.rds\", \"ST_GSM6171788_PSAPP_CO2.rds\", \"ST_GSM6171789_PSAPP_TAM2.rds\", \"ST_GSM6171792_PSAPP_CO3.rds\", \"ST_GSM6171793_PSAPP_TAM3.rds\") \n\n\n\n\nShow code\n# load data\nfor (sample in sample_names) {\n  # load the data\n  spe &lt;- readRDS(paste0(\"../data/\", sample))\n  \n  # preprocess the data\n  .spe &lt;- spatialPreprocess(spe, skip.PCA=TRUE)\n  \n  # run BayesSpace clustering\n  .spe &lt;- spatialCluster(.spe, nrep=1e3, burn.in=100, q=7, d=20)\n  \n  # save the object \n  saveRDS(.spe, paste0(\"../data/\", sample))\n}"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Spatially resolved cell types and signatures in INPP5D-deficient Alzheimer’s mice",
    "section": "",
    "text": "Contents\n\nSpatial preprocessing\n\n\n\nUseful links"
  },
  {
    "objectID": "01_spatial_analysis.R.html",
    "href": "01_spatial_analysis.R.html",
    "title": "",
    "section": "",
    "text": "CodeShow All CodeHide All Code\nMicroglial INPP5D limits plaque formation and glial reactivity in the PSAPP mouse model of Alzheimer’s disease\nShow code\nsuppressMessages(library(\"SpatialExperiment\"))\nsuppressMessages(library(\"SingleCellExperiment\"))\nsuppressMessages(library(\"DropletUtils\"))\nsuppressMessages(library(\"Seurat\"))\nsuppressMessages(library(\"ggspavis\"))\nsuppressMessages(library(\"scater\"))\nsuppressMessages(library(\"ggplot2\"))\nsuppressMessages(library(\"patchwork\"))\nsuppressMessages(library(\"biomaRt\"))\nsuppressMessages(library(\"nnSVG\"))\nsuppressMessages(library(\"scran\"))\nsuppressMessages(library(\"igraph\"))\nsuppressMessages(library(\"glue\"))\n# suppressMessages(library(\"BayesSpace\"))\n# suppressMessages(library(\"pheatmap\"))\n\n\nWarning message:\n“package ‘DropletUtils’ was built under R version 4.4.3”\nWarning message:\n“package ‘SeuratObject’ was built under R version 4.4.3”\nShow code\n# # another options for vscode for plotting\n# options(repr.plot.width = 10, repr.plot.height = 5, jupyter.plot_scale = 1)\n# # make the resolution better\noptions(repr.plot.res = 300) # set dpy to 200\nShow code\n# options(repr.plot.width = , repr.plot.height = \"auto\", jupyter.plot_scale = 1, repr.plot.res = \"auto\")\nShow code\nmain_folder &lt;- \"/home/kharuk/projects/courses/st_daad/data\"  # Change to your actual path\n\n# List all sample directories inside the main folder\nsample_dirs &lt;- list.dirs(main_folder, recursive = FALSE)\n\nprint(sample_dirs)  # Check detected directories\nShow code\nsample_id &lt;- \"GSM6171784_PSAPP_CO1\"\nShow code\n# upload one sample for preprocessing\nspe &lt;- read10xVisium(\n        samples = sample_dirs[1],\n        sample_id = \"GSM6171784_PSAPP_CO1\",\n        data = \"filtered\",\n        type = \"sparse\",\n        images = \"lowres\",\n        load = TRUE\n)\nShow code\n# move rownames to rowData names new column ensembl_id\nrowData(spe)$ensembl_id &lt;- rownames(rowData(spe))"
  },
  {
    "objectID": "01_spatial_analysis.R.html#preprocess-all-samples",
    "href": "01_spatial_analysis.R.html#preprocess-all-samples",
    "title": "",
    "section": "Preprocess all samples",
    "text": "Preprocess all samples\n\n\nShow code\n# upload samples\n\nmain_folder &lt;- \"/home/kharuk/projects/courses/st_daad/data\"  # Change to your actual path\n\n# List all sample directories inside the main folder\nsample_dirs &lt;- list.dirs(main_folder, recursive = FALSE)\n\nprint(sample_dirs)  # Check detected directories\n\n\n[1] \"/home/kharuk/projects/courses/st_daad/data/GSM6171784_PSAPP_CO1\" \n[2] \"/home/kharuk/projects/courses/st_daad/data/GSM6171785_PSAPP_TAM1\"\n[3] \"/home/kharuk/projects/courses/st_daad/data/GSM6171788_PSAPP_CO2\" \n[4] \"/home/kharuk/projects/courses/st_daad/data/GSM6171789_PSAPP_TAM2\"\n[5] \"/home/kharuk/projects/courses/st_daad/data/GSM6171792_PSAPP_CO3\" \n[6] \"/home/kharuk/projects/courses/st_daad/data/GSM6171793_PSAPP_TAM3\"\n\n\n\n\nShow code\n# function to preprocess a single sample\npreprocess_sample &lt;- function(sample_path) {\n\n    sample_id &lt;- basename(sample_path)\n\n    spe &lt;- read10xVisium(\n        samples = sample_path,\n        sample_id = sample_id,\n        data = \"filtered\",\n        type = \"sparse\",\n        images = \"lowres\",\n        load = TRUE\n    )\n\n    # First, we subset the object to keep only spots over tissue.\n    # subset the object to keep only spots over tissue\n    spe &lt;- spe[, colData(spe)$in_tissue == 1]\n    dim(spe)\n\n    # identify mito genes\n    is_mito &lt;- grepl(\"(^MT-|^mt-)\", rowData(spe)$symbol)\n    table(is_mito)\n\n    # calculate per-spot QC metrics and store in coldata \n    spe &lt;- addPerCellQC(spe, subsets = list(mito = is_mito))\n    head(colData(spe))\n\n\n    # histograms of QC metrics before filtering # TODO add title here \n    png(glue(\"qc_hist_{sample_id}.png\"), width = 1000, height = 800)\n    par(mfrow = c(3, 3), oma = c(0, 0, 3, 0))  # layout\n\n    hist(colData(spe)$sum, xlab = \"sum\", main = \"UMIs per spot\")\n    hist(colData(spe)$detected, xlab = \"detected\", main = \"Genes per spot\")\n    hist(colData(spe)$subsets_mito_percent, xlab = \"percent mitochondrial\", main = \"Percent mito UMIs\")\n\n    mtext(glue(\"QC histograms for {sample_id}\"), outer = TRUE, cex = 1)\n\n    dev.off()\n    # asign gene names for plotting \n    rownames(spe) &lt;- rowData(spe)$symbol\n    colData(spe)$sum &lt;- colSums(counts(spe))\n\n    # plot the same QC on the spatial coordinates\n    pal &lt;- c(\"#fde725\", \"navy\")\n    p1 &lt;- plotSpots(spe, annotate = \"sum\", pal = \"viridis\", point_size = 0.03) +  \n        theme_void()\n    p2 &lt;- plotSpots(spe, annotate = \"detected\", pal = \"viridis\", point_size = 0.03) + \n        theme_void()\n    p3 &lt;- plotSpots(spe, annotate = \"subsets_mito_percent\", pal = \"viridis\", point_size = 0.03) + \n        theme_void()\n    qc_before &lt;- wrap_plots(p1, p2, p3, nrow = 1) + \n        plot_annotation(title = glue(\"QC metrics for {sample_id} before filtering\"))\n    print(qc_before)\n    ggsave(filename = glue(\"qc_metrics_{sample_id}_before_filtering.png\"), plot = qc_before, width = 10, dpi = 300)\n\n    # plot QC with image included\n    p1 &lt;- plotVisium(spe, annotate = \"sum\", highlight = \"in_tissue\", point_size = 0.75) + \n        theme_void()\n\n    p2 &lt;- plotVisium(spe, annotate = \"detected\", highlight = \"in_tissue\", point_size = 0.75) +\n        theme_void()\n    p3 &lt;- plotVisium(spe, annotate = \"subsets_mito_percent\", highlight = \"in_tissue\", point_size = 0.75) + \n        theme_void()\n    tissue_plot &lt;- plotVisium(spe, highlight = \"in_tissue\", spots = FALSE) + \n        theme_void()\n\n    # display panels using patchwork\n    qc_tissue_plot &lt;- wrap_plots(p1, p2, p3, tissue_plot, nrow = 1) +\n    plot_annotation(title = glue(\"QC metrics for {sample_id} before filtering\"))\n    print(qc_tissue_plot)\n    ggsave(glue(\"qc_metrics_{sample_id}_tissue.png\"), qc_tissue_plot, width = 20, height = 5, dpi = 200)\n\n\n    # determine outliers via thresholding on MAD from the median\n    ol &lt;- perCellQCFilters(spe, sub.fields=\"subsets_mito_percent\")\n    # add results as cell metadata\n    colData(spe)[names(ol)] &lt;- ol \n    # tabulate # and % of cells that'd \n    # be discarded for different reasons\n    data.frame(\n        check.names=FALSE,\n        `#`=apply(ol, 2, sum), \n        `%`=round(100*apply(ol, 2, mean), 2))\n    # plot what spots will be discarded with MAD\n    outlier_plots &lt;- lapply(names(ol), \\(x) plotSpots(spe, annotate = x) + ggtitle(x))\n    outlier_wrap &lt;- wrap_plots(outlier_plots, nrow=1, guides=\"collect\") +\n        plot_annotation(title = glue(\"Spots flagged for discard {sample_id}\")) &\n        guides(col=guide_legend(override.aes=list(size=3))) &\n        scale_color_manual(\"discard\", values=c(\"lavender\", \"purple\")) &\n        theme(plot.title=element_text(hjust=0.5, size=8), legend.key.size=unit(0.8, \"lines\"))\n    print(outlier_wrap)\n\n    # Set the threshold manually \n    # select QC thresholds\n    qc_lib_size &lt;- colData(spe)$sum &lt; 600\n    qc_detected &lt;- colData(spe)$detected &lt; 400\n    # qc_mito &lt;- colData(spe)$subsets_mito_percent &gt; 30\n\n    # number of discarded spots for each metric\n    apply(cbind(qc_lib_size, qc_detected), 2, sum)\n    # combined set of discarded spots\n    discard &lt;- qc_lib_size | qc_detected\n    table(discard)\n    # discard spots\n    colData(spe)$discard &lt;- discard\n    # filter low-quality spots\n    spe &lt;- spe[, !colData(spe)$discard]\n    dim(spe)\n\n\n    # plot the same QC on the spatial coordinates\n    p1 &lt;- plotSpots(spe, annotate = \"sum\", pal = \"viridis\", point_size = 0.03) +  \n        theme_void()\n    p2 &lt;- plotSpots(spe, annotate = \"detected\", pal = \"viridis\", point_size = 0.03) + \n        theme_void()\n    p3 &lt;- plotSpots(spe, annotate = \"subsets_mito_percent\", pal = \"viridis\", point_size = 0.03) + \n        theme_void()\n\n\n    qc_after &lt;- wrap_plots(p1, p2, p3, nrow = 1) + \n        plot_annotation(title = glue(\"QC metrics for {sample_id} after filtering\"))\n    print(qc_after)\n    ggsave(filename = glue(\"qc_metrics_{sample_id}_after_filtering.png\"), plot = qc_after, width = 10, dpi = 300)\n\n\n    ### Processing \n    # calculate logcounts and store in object\n    spe &lt;- logNormCounts(spe)\n\n    # remove mitochondrial genes\n    spe &lt;- spe[!is_mito, ]\n    dim(spe)\n    \n    # fit mean-variance relationship\n    dec &lt;- modelGeneVar(spe)\n\n    # select top HVGs\n    top_hvgs &lt;- getTopHVGs(dec, prop = 0.1)\n    length(top_hvgs)\n\n    # run PCA and UMAP\n    spe &lt;- runPCA(spe, subset_row=top_hvgs)\n    spe &lt;- runUMAP(spe, dimred=\"PCA\", pca = 30) # use 30 PCs as in the paper\n\n    # build shared nearest-neighbor (SNN) graph\n    g &lt;- buildSNNGraph(spe, use.dimred=\"PCA\", type=\"jaccard\")\n    # cluster via Leiden community detection algorithm\n    k &lt;- cluster_leiden(g, objective_function=\"modularity\", resolution=0.8)\n    table(spe$Leiden &lt;- factor(k$membership))\n\n    # plot clusters in spatial x-y coordinates\n    spatial_p1 &lt;- plotSpots(spe, annotate = \"Leiden\", legend_position = \"none\") +\n    scale_color_manual(values = unname(pals::trubetskoy()))  # Custom color palette for spatial plot\n\n    umap_p2 &lt;- plotDimRed(spe, plot_type = \"UMAP\", \n            annotate = \"Leiden\") +\n    scale_color_manual(values = unname(pals::trubetskoy()))  # Custom color palette for spatial plot\n    cluster_plot &lt;- wrap_plots(spatial_p1, umap_p2, nrow=1) +\n        plot_annotation(title = glue(\"Leiden clusters for {sample_id}\"))\n    print(cluster_plot)\n    ggsave(filename = glue(\"clusters_{sample_id}.png\"), plot = cluster_plot, width = 10, dpi = 300)\n\n    # save the object\n    saveRDS(spe, file = glue(\"../data/ST_{sample_id}.rds\"))\n\n    return (spe)\n\n}\n\n\n\n\nShow code\n# plobably plot QC of histograms separately and then use this function to plot each plot for each sample\nspe_1 &lt;- preprocess_sample(sample_dirs[1])\nsample_id &lt;- basename(sample_dirs[1])\n\n\n\nSaving 10 x 7 in image\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSaving 10 x 7 in image\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\nSaving 10 x 7 in image\n\n\n\n\npdf: 2\n\n\n\n\n\n\n\n\n\n\n\nShow code\n# plot QC on the spatial coordinates\npar(mfrow = c(3, 3), oma = c(0, 0, 3, 0))\nhist(colData(spe_1)$sum, xlab = \"sum\", main = \"UMIs per spot\")\nhist(colData(spe_1)$detected, xlab = \"detected\", main = \"Genes per spot\")\nhist(colData(spe_1)$subsets_mito_percent, xlab = \"percent mitochondrial\", main = \"Percent mito UMIs\")\nmtext(glue(\"QC histograms for {sample_id}\"), outer = TRUE, cex = 1)\n\n\n\n\n\n\n\n\n\n\n\nShow code\n# process 2 sample\nspe_2 &lt;- preprocess_sample(sample_dirs[2])\nsample_id &lt;- basename(sample_dirs[2])\n\n# histograms of QC metrics\npar(mfrow = c(3, 3), oma = c(0, 0, 3, 0))  # layout\nhist(colData(spe_2)$sum, xlab = \"sum\", main = \"UMIs per spot\")\nhist(colData(spe_2)$detected, xlab = \"detected\", main = \"Genes per spot\")\nhist(colData(spe_2)$subsets_mito_percent, xlab = \"percent mitochondrial\", main = \"Percent mito UMIs\")\nmtext(glue(\"QC histograms for {sample_id}\"), outer = TRUE, cex = 1)\n\n\n\nSaving 10 x 7 in image\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSaving 10 x 7 in image\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\nSaving 10 x 7 in image\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\n# process 3 sample\nspe_3 &lt;- preprocess_sample(sample_dirs[3])\nsample_id &lt;- basename(sample_dirs[3])\n\n# histograms of QC metrics\npar(mfrow = c(3, 3), oma = c(0, 0, 3, 0))  # layout\nhist(colData(spe_3)$sum, xlab = \"sum\", main = \"UMIs per spot\")\nhist(colData(spe_3)$detected, xlab = \"detected\", main = \"Genes per spot\")\nhist(colData(spe_3)$subsets_mito_percent, xlab = \"percent mitochondrial\", main = \"Percent mito UMIs\")\nmtext(glue(\"QC histograms for {sample_id}\"), outer = TRUE, cex = 1)\n\n\n\nSaving 10 x 7 in image\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSaving 10 x 7 in image\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\nSaving 10 x 7 in image\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\n# process 4th sample\nspe_4 &lt;- preprocess_sample(sample_dirs[4])\nsample_id &lt;- basename(sample_dirs[4])\n\n# histograms of QC metrics\npar(mfrow = c(3, 3), oma = c(0, 0, 3, 0))  # layout\nhist(colData(spe_4)$sum, xlab = \"sum\", main = \"UMIs per spot\")\nhist(colData(spe_4)$detected, xlab = \"detected\", main = \"Genes per spot\")\nhist(colData(spe_4)$subsets_mito_percent, xlab = \"percent mitochondrial\", main = \"Percent mito UMIs\")\nmtext(glue(\"QC histograms for {sample_id}\"), outer = TRUE, cex = 1)\n\n\n\nSaving 10 x 7 in image\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSaving 10 x 7 in image\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\nSaving 10 x 7 in image\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\n# process 5th sample\nspe_5 &lt;- preprocess_sample(sample_dirs[5])\nsample_id &lt;- basename(sample_dirs[5])\n\n# histograms of QC metrics \npar(mfrow = c(3, 3), oma = c(0, 0, 3, 0))  # layout\nhist(colData(spe_5)$sum, xlab = \"sum\", main = \"UMIs per spot\")\nhist(colData(spe_5)$detected, xlab = \"detected\", main = \"Genes per spot\")\nhist(colData(spe_5)$subsets_mito_percent, xlab = \"percent mitochondrial\", main = \"Percent mito UMIs\")\nmtext(glue(\"QC histograms for {sample_id}\"), outer = TRUE, cex = 1)\n\n\n\nSaving 10 x 7 in image\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSaving 10 x 7 in image\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\nSaving 10 x 7 in image\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\n# process 6th sample\nspe_6 &lt;- preprocess_sample(sample_dirs[6])\nsample_id &lt;- basename(sample_dirs[6])\n\n# histograms of QC metrics\npar(mfrow = c(3, 3), oma = c(0, 0, 3, 0))  # layout\nhist(colData(spe_6)$sum, xlab = \"sum\", main = \"UMIs per spot\")\nhist(colData(spe_6)$detected, xlab = \"detected\", main = \"Genes per spot\")\nhist(colData(spe_6)$subsets_mito_percent, xlab = \"percent mitochondrial\", main = \"Percent mito UMIs\")\nmtext(glue(\"QC histograms for {sample_id}\"), outer = TRUE, cex = 1)\n\n\n\nSaving 10 x 7 in image\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSaving 10 x 7 in image\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\nSaving 10 x 7 in image"
  },
  {
    "objectID": "03_signatures.R.html",
    "href": "03_signatures.R.html",
    "title": "PSAPP CO1",
    "section": "",
    "text": "Show code\nsuppressMessages(library(\"SpatialExperiment\"))\nsuppressMessages(library(\"SingleCellExperiment\"))\nsuppressMessages(library(\"DropletUtils\"))\nsuppressMessages(library(\"Seurat\"))\nsuppressMessages(library(\"ggspavis\"))\nsuppressMessages(library(\"scater\"))\nsuppressMessages(library(\"ggplot2\"))\nsuppressMessages(library(\"patchwork\"))\nsuppressMessages(library(\"biomaRt\"))\nsuppressMessages(library(\"nnSVG\"))\nsuppressMessages(library(\"scran\"))\nsuppressMessages(library(\"igraph\"))\nsuppressMessages(library(\"pheatmap\"))\nsuppressMessages(library(\"msigdbr\"))\nsuppressMessages(library(\"AUCell\"))\nsuppressMessages(library(\"BiocParallel\"))\n\nbp &lt;- MulticoreParam(th &lt;- 10)\n\n\nWarning message:\n“package ‘DropletUtils’ was built under R version 4.4.3”\nWarning message:\n“package ‘SeuratObject’ was built under R version 4.4.3”\nWarning message:\n“package ‘msigdbr’ was built under R version 4.4.3”\n\n\n\n\nShow code\nGSM6171788_PSAPP_CO2\nGSM6171792_PSAPP_CO3\n\nGSM6171785_PSAPP_TAM1\nGSM6171789_PSAPP_TAM2\nGSM6171793_PSAPP_TAM3\n\n\n\n\nShow code\nspe &lt;- readRDS(\"../data/ST_GSM6171784_PSAPP_CO1.rds\")\n\n\n\n\nShow code\nplotSpots(spe, annotate=\"Leiden\") +\nplotSpots(spe, annotate=\"bayesspace\") +\n    plot_layout() &\n    theme(legend.key.size=unit(0, \"lines\")) &\n    scale_color_manual(values=unname(pals::trubetskoy())) & \n    ggtitle(\"Clusters for PSAPP CO1\")\n\n\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\n# find marker genes \nmgs &lt;- findMarkers(spe, groups=spe$bayesspace, direction=\"up\")\ntop &lt;- lapply(mgs, \\(df) rownames(df)[df$Top &lt;= 3])\nlength(top &lt;- unique(unlist(top)))\n\n\n68\n\n\n\n\nShow code\n# plot heatmap of top marker genes per cluster\npbs &lt;- aggregateAcrossCells(spe,  \n    ids=spe$bayesspace, subset.row=top, \n    use.assay.type=\"logcounts\", statistics=\"mean\")\n# use symbols as feature names\nmtx &lt;- t(assay(pbs))\ncolnames(mtx) &lt;- rowData(pbs)$symbol\npheatmap(mat=mtx, scale=\"column\", fontsize = 7)\n\n\n\n\n\n\n\n\n\n\n\nShow code\n# save mtx as csv\nwrite.csv(mtx, file=\"../data/marker_genes_CO1.csv\", row.names=TRUE)\n\n\n\nAnnotation\n\n\nShow code\n# assign cell types to clusters\nspe$celltype &lt;- NA\nspe$celltype[spe$bayesspace == \"1\"] &lt;- \"Oligodendrocytes\"                \nspe$celltype[spe$bayesspace == \"2\"] &lt;- \"Excitatory Neurons (glutamatergic)\"               \nspe$celltype[spe$bayesspace == \"3\"] &lt;- \"Astrocytes\"\nspe$celltype[spe$bayesspace == \"4\"] &lt;- \"Inhibitory Neurons\"                   \nspe$celltype[spe$bayesspace == \"5\"] &lt;- \"Excitatory Neurons\" \nspe$celltype[spe$bayesspace == \"6\"] &lt;- \"Astrocytes/Reactive Astrocytes\"                 \nspe$celltype[spe$bayesspace == \"7\"] &lt;- \"Excitatory Neurons\" \n\n\n\n\nShow code\nplot_cell_type &lt;- plotSpots(spe, annotate=\"celltype\", point_size=1) +\n    plot_layout() &\n    theme(legend.key.size=unit(0, \"lines\")) &\n    scale_color_manual(values=unname(pals::trubetskoy())) & \n    ggtitle(\"Cell types for PSAPP CO1\")\nplot_cell_type\nggsave(\"cell_types_plot_PSAPP_CO1.png\", plot=plot_cell_type, width=10, height=8, dpi=300)\n\n\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSignatures\n\n\nShow code\n# retrieve hallmark gene sets from 'MSigDB'\ndb &lt;- msigdbr(species=\"Mus musculus\", collection=\"H\")\n# get list of gene symbols, one element per set\ngs &lt;- split(db$ensembl_gene, db$gs_name)\n# simplify set identifiers (drop prefix, use lower case)\nnames(gs) &lt;- tolower(gsub(\"HALLMARK_\", \"\", names(gs)))\n# how many sets?\nlength(gs)\n\n\n50\n\n\n\n\nShow code\n# run AUCell for signature scoring\n\n# realize (sparse) gene expression matrix\nmtx &lt;- as(logcounts(spe), \"dgCMatrix\") \n# use ensembl identifiers as feature names\nrownames(mtx) &lt;- rowData(spe)$ensembl_id\n# build per-spot gene rankings\nrnk &lt;- AUCell_buildRankings(mtx, BPPARAM=bp, plotStats=FALSE, verbose=FALSE)\n# calculate AUC for each gene set in each spot\nauc &lt;- AUCell_calcAUC(geneSets=gs, rankings=rnk, nCores=th, verbose=FALSE)\n# add results as spot metadata\ncolData(spe)[rownames(auc)] &lt;- res &lt;- t(assay(auc)) \n\n\n\n\nShow code\n# take top sets\nvar &lt;- colVars(res)\ntop &lt;- names(tail(sort(var), 8))\n\n\n\n\nShow code\np &lt;- lapply(top, \\(.) {\n    spe[[.]] &lt;- scale(spe[[.]]) # scaling\n    plotSpots(spe, annotate=., point_size = 0.05) # plotting\n}) |&gt; \n    # arrange & prettify\n    wrap_plots(ncol=2, guides=\"collect\") & \n    scale_color_gradientn(\n        colors=pals::jet(),\n        oob=scales::squish, \n        limits=c(-2.5, 2.5)) & \n    theme(\n        text = element_text(size = 5),\n        legend.key.width=unit(0.5, \"lines\"), \n        legend.key.height=unit(1, \"lines\")) \np\nggsave(\"signature_analysis_plot_PSAPP_CO1.png\", plot=p, width=10, height=8, dpi=300)\n\n\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\nfor (. in c(\"celltype\")) {\n    # aggregate AUC values by cluster\n    mu &lt;- aggregateAcrossCells(auc[top, ], spe[[.]], \n        use.assay.type=\"AUC\", statistics=\"mean\")\n    # visualize as (cluster x set) heatmap\n    pheatmap(\n        mat=t(assay(mu)), scale=\"column\", col=pals::coolwarm(), \n        main=paste(\"Heatmap of signatures for CO1\"),\n        cellwidth=10, cellheight=10, treeheight_row=5, treeheight_col=5)\n}\n\n\n\n\n\n\n\n\n\n\n\nPSAPP CO2\n\n\nShow code\nspe &lt;- readRDS(\"../data/ST_GSM6171788_PSAPP_CO2.rds\")\n\n\n\n\nShow code\nplotSpots(spe, annotate=\"Leiden\") +\nplotSpots(spe, annotate=\"bayesspace\") +\n    plot_layout() &\n    theme(legend.key.size=unit(0, \"lines\")) &\n    scale_color_manual(values=unname(pals::trubetskoy())) & \n    ggtitle(\"Clusters for PSAPP CO2\")\n\n\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\n# find marker genes \nmgs &lt;- findMarkers(spe, groups=spe$bayesspace, direction=\"up\")\ntop &lt;- lapply(mgs, \\(df) rownames(df)[df$Top &lt;= 3])\nlength(top &lt;- unique(unlist(top)))\n\n\n68\n\n\n\n\nShow code\n# plot heatmap of top marker genes per cluster\npbs &lt;- aggregateAcrossCells(spe,  \n    ids=spe$bayesspace, subset.row=top, \n    use.assay.type=\"logcounts\", statistics=\"mean\")\n# use symbols as feature names\nmtx &lt;- t(assay(pbs))\ncolnames(mtx) &lt;- rowData(pbs)$symbol\npheatmap(mat=mtx, scale=\"column\", fontsize = 7)\n\n\n\n\n\n\n\n\n\n\n\nShow code\n# save mtx as csv\nwrite.csv(mtx, file=\"../data/top_genes_CO2.csv\", row.names=TRUE)\n\n\n\nAnnotation\n\n\nShow code\n# assign cell types to clusters\nspe$celltype &lt;- NA\nspe$celltype[spe$bayesspace == \"1\"] &lt;- \"Excitatory Neurons\"                \nspe$celltype[spe$bayesspace == \"2\"] &lt;- \"Astrocytes\"               \nspe$celltype[spe$bayesspace == \"3\"] &lt;- \"Inhibitory Neurons\"\nspe$celltype[spe$bayesspace == \"4\"] &lt;- \"Excitatory Neurons\"                   \nspe$celltype[spe$bayesspace == \"5\"] &lt;- \"Dentate gyrus granule cells\" \nspe$celltype[spe$bayesspace == \"6\"] &lt;- \"Oligodendrocytes\"                 \nspe$celltype[spe$bayesspace == \"7\"] &lt;- \"Inhibitory Neurons\" \n\n\n\n\nShow code\nplot_cell_type &lt;- plotSpots(spe, annotate=\"celltype\", point_size=1) +\n    plot_layout() &\n    theme(legend.key.size=unit(0, \"lines\")) &\n    scale_color_manual(values=unname(pals::trubetskoy())) & \n    ggtitle(\"Cell types for PSAPP CO2\")\nplot_cell_type\nggsave(\"cell_types_plot_PSAPP_CO2.png\", plot=plot_cell_type, width=10, height=8, dpi=300)\n\n\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSignatures\n\n\nShow code\n# retrieve hallmark gene sets from 'MSigDB'\ndb &lt;- msigdbr(species=\"Mus musculus\", collection=\"H\")\n# get list of gene symbols, one element per set\ngs &lt;- split(db$ensembl_gene, db$gs_name)\n# simplify set identifiers (drop prefix, use lower case)\nnames(gs) &lt;- tolower(gsub(\"HALLMARK_\", \"\", names(gs)))\n# how many sets?\nlength(gs)\n\n\n50\n\n\n\n\nShow code\n# run AUCell for signature scoring\n\n# realize (sparse) gene expression matrix\nmtx &lt;- as(logcounts(spe), \"dgCMatrix\") \n# use ensembl identifiers as feature names\nrownames(mtx) &lt;- rowData(spe)$ensembl_id\n# build per-spot gene rankings\nrnk &lt;- AUCell_buildRankings(mtx, BPPARAM=bp, plotStats=FALSE, verbose=FALSE)\n# calculate AUC for each gene set in each spot\nauc &lt;- AUCell_calcAUC(geneSets=gs, rankings=rnk, nCores=th, verbose=FALSE)\n# add results as spot metadata\ncolData(spe)[rownames(auc)] &lt;- res &lt;- t(assay(auc)) \n\n\n\n\nShow code\n# take top sets\nvar &lt;- colVars(res)\ntop &lt;- names(tail(sort(var), 8))\n\n\n\n\nShow code\np &lt;- lapply(top, \\(.) {\n    spe[[.]] &lt;- scale(spe[[.]]) # scaling\n    plotSpots(spe, annotate=., point_size = 0.05) # plotting\n}) |&gt; \n    # arrange & prettify\n    wrap_plots(ncol=2, guides=\"collect\") & \n    scale_color_gradientn(\n        colors=pals::jet(),\n        oob=scales::squish, \n        limits=c(-2.5, 2.5)) & \n    theme(\n        text = element_text(size = 5),\n        legend.key.width=unit(0.5, \"lines\"), \n        legend.key.height=unit(1, \"lines\")) \np\nggsave(\"signature_analysis_plot_PSAPP_CO2.png\", plot=p, width=10, height=8, dpi=300)\n\n\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\nfor (. in c(\"celltype\")) {\n    # aggregate AUC values by cluster\n    mu &lt;- aggregateAcrossCells(auc[top, ], spe[[.]], \n        use.assay.type=\"AUC\", statistics=\"mean\")\n    # visualize as (cluster x set) heatmap\n    pheatmap(\n        mat=t(assay(mu)), scale=\"column\", col=pals::coolwarm(), \n        main=paste(\"Heatmap of signatures for CO2\"),\n        cellwidth=10, cellheight=10, treeheight_row=5, treeheight_col=5)\n}\n\n\n\n\n\n\n\n\n\n\n\n\nPSAPP CO3\n\n\nShow code\nspe &lt;- readRDS(\"../data/ST_GSM6171792_PSAPP_CO3.rds\")\n\n\n\n\nShow code\nplotSpots(spe, annotate=\"Leiden\") +\nplotSpots(spe, annotate=\"bayesspace\") +\n    plot_layout() &\n    theme(legend.key.size=unit(0, \"lines\")) &\n    scale_color_manual(values=unname(pals::trubetskoy())) & \n    ggtitle(\"Clusters for PSAPP CO3\")\n\n\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\n# find marker genes \nmgs &lt;- findMarkers(spe, groups=spe$bayesspace, direction=\"up\")\ntop &lt;- lapply(mgs, \\(df) rownames(df)[df$Top &lt;= 3])\nlength(top &lt;- unique(unlist(top)))\n\n\n62\n\n\n\n\nShow code\n# plot heatmap of top marker genes per cluster\npbs &lt;- aggregateAcrossCells(spe,  \n    ids=spe$bayesspace, subset.row=top, \n    use.assay.type=\"logcounts\", statistics=\"mean\")\n# use symbols as feature names\nmtx &lt;- t(assay(pbs))\ncolnames(mtx) &lt;- rowData(pbs)$symbol\npheatmap(mat=mtx, scale=\"column\", fontsize = 7)\n\n\n\n\n\n\n\n\n\n\n\nShow code\n# save mtx as csv\nwrite.csv(mtx, file=\"../data/top_genes_CO3.csv\", row.names=TRUE)\n\n\n\nAnnotation\n\n\nShow code\n# assign cell types to clusters\nspe$celltype &lt;- NA\nspe$celltype[spe$bayesspace == \"1\"] &lt;- \"Excitatory Neurons\"                \nspe$celltype[spe$bayesspace == \"2\"] &lt;- \"Oligodendrocytes\"               \nspe$celltype[spe$bayesspace == \"3\"] &lt;- \"Inhibitory Neurons\"\nspe$celltype[spe$bayesspace == \"4\"] &lt;- \"Astrocytes\"                   \nspe$celltype[spe$bayesspace == \"5\"] &lt;- \"Inhibitory Neurons\" \nspe$celltype[spe$bayesspace == \"6\"] &lt;- \"Mixed neuronal population/Neuronal precursors\"                 \nspe$celltype[spe$bayesspace == \"7\"] &lt;- \"Excitatory Neurons\" \n\n\n\n\nShow code\nplot_cell_type &lt;- plotSpots(spe, annotate=\"celltype\", point_size=1) +\n    plot_layout() &\n    theme(legend.key.size=unit(0, \"lines\")) &\n    scale_color_manual(values=unname(pals::trubetskoy())) & \n    ggtitle(\"Cell types for PSAPP CO3\")\nplot_cell_type\nggsave(\"cell_types_plot_PSAPP_CO3.png\", plot=plot_cell_type, width=10, height=8, dpi=300)\n\n\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSignatures\n\n\nShow code\n# retrieve hallmark gene sets from 'MSigDB'\ndb &lt;- msigdbr(species=\"Mus musculus\", collection=\"H\")\n# get list of gene symbols, one element per set\ngs &lt;- split(db$ensembl_gene, db$gs_name)\n# simplify set identifiers (drop prefix, use lower case)\nnames(gs) &lt;- tolower(gsub(\"HALLMARK_\", \"\", names(gs)))\n# how many sets?\nlength(gs)\n\n\n50\n\n\n\n\nShow code\n# run AUCell for signature scoring\n\n# realize (sparse) gene expression matrix\nmtx &lt;- as(logcounts(spe), \"dgCMatrix\") \n# use ensembl identifiers as feature names\nrownames(mtx) &lt;- rowData(spe)$ensembl_id\n# build per-spot gene rankings\nrnk &lt;- AUCell_buildRankings(mtx, BPPARAM=bp, plotStats=FALSE, verbose=FALSE)\n# calculate AUC for each gene set in each spot\nauc &lt;- AUCell_calcAUC(geneSets=gs, rankings=rnk, nCores=th, verbose=FALSE)\n# add results as spot metadata\ncolData(spe)[rownames(auc)] &lt;- res &lt;- t(assay(auc)) \n\n\n\n\nShow code\n# take top sets\nvar &lt;- colVars(res)\ntop &lt;- names(tail(sort(var), 8))\n\n\n\n\nShow code\np &lt;- lapply(top, \\(.) {\n    spe[[.]] &lt;- scale(spe[[.]]) # scaling\n    plotSpots(spe, annotate=., point_size = 0.05) # plotting\n}) |&gt; \n    # arrange & prettify\n    wrap_plots(ncol=2, guides=\"collect\") & \n    scale_color_gradientn(\n        colors=pals::jet(),\n        oob=scales::squish, \n        limits=c(-2.5, 2.5)) & \n    theme(\n        text = element_text(size = 5),\n        legend.key.width=unit(0.5, \"lines\"), \n        legend.key.height=unit(1, \"lines\")) \np\nggsave(\"signature_analysis_plot_PSAPP_CO3.png\", plot=p, width=10, height=8, dpi=300)\n\n\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\nfor (. in c(\"celltype\")) {\n    # aggregate AUC values by cluster\n    mu &lt;- aggregateAcrossCells(auc[top, ], spe[[.]], \n        use.assay.type=\"AUC\", statistics=\"mean\")\n    # visualize as (cluster x set) heatmap\n    pheatmap(\n        mat=t(assay(mu)), scale=\"column\", col=pals::coolwarm(), \n        main=paste(\"Heatmap of signatures for CO3\"),\n        cellwidth=10, cellheight=10, treeheight_row=5, treeheight_col=5)\n}\n\n\n\n\n\n\n\n\n\n\n\n\nPSAPP TAM1\n\n\nShow code\nspe &lt;- readRDS(\"../data/ST_GSM6171785_PSAPP_TAM1.rds\")\n\n\n\n\nShow code\nplotSpots(spe, annotate=\"Leiden\") +\nplotSpots(spe, annotate=\"bayesspace\") +\n    plot_layout() &\n    theme(legend.key.size=unit(0, \"lines\")) &\n    scale_color_manual(values=unname(pals::trubetskoy())) & \n    ggtitle(\"Clusters for PSAPP TAM1\")\n\n\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\n# find marker genes \nmgs &lt;- findMarkers(spe, groups=spe$bayesspace, direction=\"up\")\ntop &lt;- lapply(mgs, \\(df) rownames(df)[df$Top &lt;= 3])\nlength(top &lt;- unique(unlist(top)))\n\n\n56\n\n\n\n\nShow code\n# plot heatmap of top marker genes per cluster\npbs &lt;- aggregateAcrossCells(spe,  \n    ids=spe$bayesspace, subset.row=top, \n    use.assay.type=\"logcounts\", statistics=\"mean\")\n# use symbols as feature names\nmtx &lt;- t(assay(pbs))\ncolnames(mtx) &lt;- rowData(pbs)$symbol\npheatmap(mat=mtx, scale=\"column\", fontsize = 7)\n\n\n\n\n\n\n\n\n\n\n\nShow code\n# save mtx as csv\nwrite.csv(mtx, file=\"../data/top_genes_TAM1.csv\", row.names=TRUE)\n\n\n\nAnnotation\n\n\nShow code\n# assign cell types to clusters\nspe$celltype &lt;- NA\nspe$celltype[spe$bayesspace == \"1\"] &lt;- \"Excitatory neurons\"                \nspe$celltype[spe$bayesspace == \"2\"] &lt;- \"Astrocytes\"               \nspe$celltype[spe$bayesspace == \"3\"] &lt;- \"Inhibitory interneurons\"\nspe$celltype[spe$bayesspace == \"4\"] &lt;- \"Glutamatergic projection neurons\"                   \nspe$celltype[spe$bayesspace == \"5\"] &lt;- \"Oligodendrocytes\" \nspe$celltype[spe$bayesspace == \"6\"] &lt;- \"Medium spiny neurons\"                 \nspe$celltype[spe$bayesspace == \"7\"] &lt;- \"Layer-specific excitatory neurons\" \n\n\n\n\nShow code\nplot_cell_type &lt;- plotSpots(spe, annotate=\"celltype\", point_size=1) +\n    plot_layout() &\n    theme(legend.key.size=unit(0, \"lines\")) &\n    scale_color_manual(values=unname(pals::trubetskoy())) & \n    ggtitle(\"Cell types for PSAPP TAM1\")\nplot_cell_type\nggsave(\"cell_types_plot_PSAPP_TAM1.png\", plot=plot_cell_type, width=10, height=8, dpi=300)\n\n\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSignatures\n\n\nShow code\n# retrieve hallmark gene sets from 'MSigDB'\ndb &lt;- msigdbr(species=\"Mus musculus\", collection=\"H\")\n# get list of gene symbols, one element per set\ngs &lt;- split(db$ensembl_gene, db$gs_name)\n# simplify set identifiers (drop prefix, use lower case)\nnames(gs) &lt;- tolower(gsub(\"HALLMARK_\", \"\", names(gs)))\n# how many sets?\nlength(gs)\n\n\n50\n\n\n\n\nShow code\n# run AUCell for signature scoring\n\n# realize (sparse) gene expression matrix\nmtx &lt;- as(logcounts(spe), \"dgCMatrix\") \n# use ensembl identifiers as feature names\nrownames(mtx) &lt;- rowData(spe)$ensembl_id\n# build per-spot gene rankings\nrnk &lt;- AUCell_buildRankings(mtx, BPPARAM=bp, plotStats=FALSE, verbose=FALSE)\n# calculate AUC for each gene set in each spot\nauc &lt;- AUCell_calcAUC(geneSets=gs, rankings=rnk, nCores=th, verbose=FALSE)\n# add results as spot metadata\ncolData(spe)[rownames(auc)] &lt;- res &lt;- t(assay(auc)) \n\n\n\n\nShow code\n# take top sets\nvar &lt;- colVars(res)\ntop &lt;- names(tail(sort(var), 8))\n\n\n\n\nShow code\np &lt;- lapply(top, \\(.) {\n    spe[[.]] &lt;- scale(spe[[.]]) # scaling\n    plotSpots(spe, annotate=., point_size = 0.05) # plotting\n}) |&gt; \n    # arrange & prettify\n    wrap_plots(ncol=2, guides=\"collect\") & \n    scale_color_gradientn(\n        colors=pals::jet(),\n        oob=scales::squish, \n        limits=c(-2.5, 2.5)) & \n    theme(\n        text = element_text(size = 5),\n        legend.key.width=unit(0.5, \"lines\"), \n        legend.key.height=unit(1, \"lines\")) \np\nggsave(\"signature_analysis_plot_PSAPP_TAM1.png\", plot=p, width=10, height=8, dpi=300)\n\n\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\nfor (. in c(\"celltype\")) {\n    # aggregate AUC values by cluster\n    mu &lt;- aggregateAcrossCells(auc[top, ], spe[[.]], \n        use.assay.type=\"AUC\", statistics=\"mean\")\n    # visualize as (cluster x set) heatmap\n    pheatmap(\n        mat=t(assay(mu)), scale=\"column\", col=pals::coolwarm(), \n        main=paste(\"Heatmap of signatures for TAM1\"),\n        cellwidth=10, cellheight=10, treeheight_row=5, treeheight_col=5)\n}\n\n\n\n\n\n\n\n\n\n\n\n\nPSAPP TAM2\n\n\nShow code\nspe &lt;- readRDS(\"../data/ST_GSM6171789_PSAPP_TAM2.rds\")\n\n\n\n\nShow code\nplotSpots(spe, annotate=\"Leiden\") +\nplotSpots(spe, annotate=\"bayesspace\") +\n    plot_layout() &\n    theme(legend.key.size=unit(0, \"lines\")) &\n    scale_color_manual(values=unname(pals::trubetskoy())) & \n    ggtitle(\"Clusters for PSAPP TAM2\")\n\n\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\n# find marker genes \nmgs &lt;- findMarkers(spe, groups=spe$bayesspace, direction=\"up\")\ntop &lt;- lapply(mgs, \\(df) rownames(df)[df$Top &lt;= 3])\nlength(top &lt;- unique(unlist(top)))\n\n\n70\n\n\n\n\nShow code\n# plot heatmap of top marker genes per cluster\npbs &lt;- aggregateAcrossCells(spe,  \n    ids=spe$bayesspace, subset.row=top, \n    use.assay.type=\"logcounts\", statistics=\"mean\")\n# use symbols as feature names\nmtx &lt;- t(assay(pbs))\ncolnames(mtx) &lt;- rowData(pbs)$symbol\npheatmap(mat=mtx, scale=\"column\", fontsize = 7)\n\n\n\n\n\n\n\n\n\n\n\nShow code\n# save mtx as csv\nwrite.csv(mtx, file=\"../data/top_genes_TAM2.csv\", row.names=TRUE)\n\n\n\nAnnotation\n\n\nShow code\n# assign cell types to clusters\nspe$celltype &lt;- NA\nspe$celltype[spe$bayesspace == \"1\"] &lt;- \"Excitatory cortical neurons\"                \nspe$celltype[spe$bayesspace == \"2\"] &lt;- \"Excitatory neurons\"               \nspe$celltype[spe$bayesspace == \"3\"] &lt;- \"Oligodendrocytes\"\nspe$celltype[spe$bayesspace == \"4\"] &lt;- \"Interneurons/inhibitory neurons\"                   \nspe$celltype[spe$bayesspace == \"5\"] &lt;- \"Astrocytes\" \nspe$celltype[spe$bayesspace == \"6\"] &lt;- \"Excitatory projection neurons\"                 \nspe$celltype[spe$bayesspace == \"7\"] &lt;- \"Mixed inhibitory neurons/OPCs\" \n\n\n\n\nShow code\nplot_cell_type &lt;- plotSpots(spe, annotate=\"celltype\", point_size=1) +\n    plot_layout() &\n    theme(legend.key.size=unit(0, \"lines\")) &\n    scale_color_manual(values=unname(pals::trubetskoy())) & \n    ggtitle(\"Cell types for PSAPP TAM2\")\nplot_cell_type\nggsave(\"cell_types_plot_PSAPP_TAM2.png\", plot=plot_cell_type, width=10, height=8, dpi=300)\n\n\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSignatures\n\n\nShow code\n# retrieve hallmark gene sets from 'MSigDB'\ndb &lt;- msigdbr(species=\"Mus musculus\", collection=\"H\")\n# get list of gene symbols, one element per set\ngs &lt;- split(db$ensembl_gene, db$gs_name)\n# simplify set identifiers (drop prefix, use lower case)\nnames(gs) &lt;- tolower(gsub(\"HALLMARK_\", \"\", names(gs)))\n# how many sets?\nlength(gs)\n\n\n50\n\n\n\n\nShow code\n# run AUCell for signature scoring\n\n# realize (sparse) gene expression matrix\nmtx &lt;- as(logcounts(spe), \"dgCMatrix\") \n# use ensembl identifiers as feature names\nrownames(mtx) &lt;- rowData(spe)$ensembl_id\n# build per-spot gene rankings\nrnk &lt;- AUCell_buildRankings(mtx, BPPARAM=bp, plotStats=FALSE, verbose=FALSE)\n# calculate AUC for each gene set in each spot\nauc &lt;- AUCell_calcAUC(geneSets=gs, rankings=rnk, nCores=th, verbose=FALSE)\n# add results as spot metadata\ncolData(spe)[rownames(auc)] &lt;- res &lt;- t(assay(auc)) \n\n\n\n\nShow code\n# take top sets\nvar &lt;- colVars(res)\ntop &lt;- names(tail(sort(var), 8))\n\n\n\n\nShow code\np &lt;- lapply(top, \\(.) {\n    spe[[.]] &lt;- scale(spe[[.]]) # scaling\n    plotSpots(spe, annotate=., point_size = 0.05) # plotting\n}) |&gt; \n    # arrange & prettify\n    wrap_plots(ncol=2, guides=\"collect\") & \n    scale_color_gradientn(\n        colors=pals::jet(),\n        oob=scales::squish, \n        limits=c(-2.5, 2.5)) & \n    theme(\n        text = element_text(size = 5),\n        legend.key.width=unit(0.5, \"lines\"), \n        legend.key.height=unit(1, \"lines\")) \np\nggsave(\"signature_analysis_plot_PSAPP_TAM2.png\", plot=p, width=10, height=8, dpi=300)\n\n\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\nfor (. in c(\"celltype\")) {\n    # aggregate AUC values by cluster\n    mu &lt;- aggregateAcrossCells(auc[top, ], spe[[.]], \n        use.assay.type=\"AUC\", statistics=\"mean\")\n    # visualize as (cluster x set) heatmap\n    pheatmap(\n        mat=t(assay(mu)), scale=\"column\", col=pals::coolwarm(), \n        main=paste(\"Heatmap of signatures for TAM2\"),\n        cellwidth=10, cellheight=10, treeheight_row=5, treeheight_col=5)\n}\n\n\n\n\n\n\n\n\n\n\n\n\nPSAPP TAM3\n\n\nShow code\nspe &lt;- readRDS(\"../data/ST_GSM6171793_PSAPP_TAM3.rds\")\n\n\n\n\nShow code\nplotSpots(spe, annotate=\"Leiden\") +\nplotSpots(spe, annotate=\"bayesspace\") +\n    plot_layout() &\n    theme(legend.key.size=unit(0, \"lines\")) &\n    scale_color_manual(values=unname(pals::trubetskoy())) & \n    ggtitle(\"Clusters for PSAPP TAM3\")\n\n\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\n# find marker genes \nmgs &lt;- findMarkers(spe, groups=spe$bayesspace, direction=\"up\")\ntop &lt;- lapply(mgs, \\(df) rownames(df)[df$Top &lt;= 3])\nlength(top &lt;- unique(unlist(top)))\n\n\n59\n\n\n\n\nShow code\n# plot heatmap of top marker genes per cluster\npbs &lt;- aggregateAcrossCells(spe,  \n    ids=spe$bayesspace, subset.row=top, \n    use.assay.type=\"logcounts\", statistics=\"mean\")\n# use symbols as feature names\nmtx &lt;- t(assay(pbs))\ncolnames(mtx) &lt;- rowData(pbs)$symbol\npheatmap(mat=mtx, scale=\"column\", fontsize = 7)\n\n\n\n\n\n\n\n\n\n\n\nShow code\n# save mtx as csv\nwrite.csv(mtx, file=\"../data/top_genes_TAM3.csv\", row.names=TRUE)\n\n\n\nAnnotation\n\n\nShow code\n# assign cell types to clusters\nspe$celltype &lt;- NA\nspe$celltype[spe$bayesspace == \"1\"] &lt;- \"Inhibitory interneurons\"                \nspe$celltype[spe$bayesspace == \"2\"] &lt;- \"Excitatory neurons\"               \nspe$celltype[spe$bayesspace == \"3\"] &lt;- \"Oligodendrocytes\"\nspe$celltype[spe$bayesspace == \"4\"] &lt;- \"Astrocytes\"                   \nspe$celltype[spe$bayesspace == \"5\"] &lt;- \"Specialized interneurons\" \nspe$celltype[spe$bayesspace == \"6\"] &lt;- \"Upper layer excitatory neurons\"                 \nspe$celltype[spe$bayesspace == \"7\"] &lt;- \"Deep layer excitatory neurons\" \n\n\n\n\nShow code\nplot_cell_type &lt;- plotSpots(spe, annotate=\"celltype\", point_size=1) +\n    plot_layout() &\n    theme(legend.key.size=unit(0, \"lines\")) &\n    scale_color_manual(values=unname(pals::trubetskoy())) & \n    ggtitle(\"Cell types for PSAPP TAM3\")\nplot_cell_type\nggsave(\"cell_types_plot_PSAPP_TAM3.png\", plot=plot_cell_type, width=10, height=8, dpi=300)\n\n\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSignatures\n\n\nShow code\n# retrieve hallmark gene sets from 'MSigDB'\ndb &lt;- msigdbr(species=\"Mus musculus\", collection=\"H\")\n# get list of gene symbols, one element per set\ngs &lt;- split(db$ensembl_gene, db$gs_name)\n# simplify set identifiers (drop prefix, use lower case)\nnames(gs) &lt;- tolower(gsub(\"HALLMARK_\", \"\", names(gs)))\n# how many sets?\nlength(gs)\n\n\n50\n\n\n\n\nShow code\n# run AUCell for signature scoring\n\n# realize (sparse) gene expression matrix\nmtx &lt;- as(logcounts(spe), \"dgCMatrix\") \n# use ensembl identifiers as feature names\nrownames(mtx) &lt;- rowData(spe)$ensembl_id\n# build per-spot gene rankings\nrnk &lt;- AUCell_buildRankings(mtx, BPPARAM=bp, plotStats=FALSE, verbose=FALSE)\n# calculate AUC for each gene set in each spot\nauc &lt;- AUCell_calcAUC(geneSets=gs, rankings=rnk, nCores=th, verbose=FALSE)\n# add results as spot metadata\ncolData(spe)[rownames(auc)] &lt;- res &lt;- t(assay(auc)) \n\n\n\n\nShow code\n# take top sets\nvar &lt;- colVars(res)\ntop &lt;- names(tail(sort(var), 8))\n\n\n\n\nShow code\np &lt;- lapply(top, \\(.) {\n    spe[[.]] &lt;- scale(spe[[.]]) # scaling\n    plotSpots(spe, annotate=., point_size = 0.05) # plotting\n}) |&gt; \n    # arrange & prettify\n    wrap_plots(ncol=2, guides=\"collect\") & \n    scale_color_gradientn(\n        colors=pals::jet(),\n        oob=scales::squish, \n        limits=c(-2.5, 2.5)) & \n    theme(\n        text = element_text(size = 5),\n        legend.key.width=unit(0.5, \"lines\"), \n        legend.key.height=unit(1, \"lines\")) \np\nggsave(\"signature_analysis_plot_PSAPP_TAM3.png\", plot=p, width=10, height=8, dpi=300)\n\n\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\nScale for colour is already present.\n\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\nfor (. in c(\"celltype\")) {\n    # aggregate AUC values by cluster\n    mu &lt;- aggregateAcrossCells(auc[top, ], spe[[.]], \n        use.assay.type=\"AUC\", statistics=\"mean\")\n    # visualize as (cluster x set) heatmap\n    pheatmap(\n        mat=t(assay(mu)), scale=\"column\", col=pals::coolwarm(), \n        main=paste(\"Heatmap of signatures for TAM3\"),\n        cellwidth=10, cellheight=10, treeheight_row=5, treeheight_col=5)\n}"
  }
]